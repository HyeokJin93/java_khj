package day6;

public class khjD6 {
/*
	배열과 문자열 (p.102)

	배열
		30명 학생의 수학 성적을 관리하려 한다.
			30개의 변수를 선언하면, 반복문을 이용할 수 없다. 변수 관리가 비효율적
		같은 자료형 변수를 모아놓은 것

		배열 선언 방법
			자료형 [] 배열명;
			자료형 배열명 [];
			
		배열 생성 방법
			배열을 new를 이용하여 생성하면 각 배열에 있는 값들은 자료형에 맞는 초기값으로 초기화가 됨
			정수형은 0, 실수형은 0.0, 문자는 '\0', boolean은 false, 참조변수는 null로 초기화
			배열은 값을 초기화하지 않아도 자동으로 기본값으로 초기화되기 때문에 사용할수 있음.
		
			자료형 [] 배열명 = new 자료형[배열크기];
			자료형 배열명 [] = new 자료형[배열크기];
			
		모든 변수는 기본 자료형 변수이거나 참조변수이다.
			기본 자료형 변수 : 실제 값을 저장하는 변수
			참조 변수 : 주소를 저장하는 변수
		
		배열은 참조변수
		배열은 번지를 이용하여 접근함. 시작번지는 0번지부터 배열크기 -1번지까지 있음
		
		//배열에 값을 저장
		 배열명[번지] = 값;
		//변수 num에 배열의 값을 저장
		 num = 배열명[번지];
		 잘못된 번지로 접근하면 예외가 발생.
		 
	배열의 길이
		배열명.length를 통해 배열의 길이를 알 수 있다.
		
	
	향상된 for문
	
		for( 자료형 변수명 : 배열이나 리스트 ){
			실행문;
		}
		
		for(int i =0 ; i<배열.length; i++){
			자료형 변수명 = 배열[i];
		}
		
		향상된for문은 배열의 값을 수정할 때는 사용하지 않음
		향상된for문은 배열의 값을 [0]번지부터 마지막번지까지 순차적으로 확인할 때 사용
		배열에서 꺼낸 값을 변수명에 저장
		 
	배열 초기화
		자료형 [] 배열명 = (값1, 값2, ..., 값n); // <- n개 짜리 배열 생성
		자료형 [] 배열명 = new int[](값1,  값2, ..., 값n);// n개짜리 배열 생성
		
	배열 복사
		배열은 참조변수이기 때문에 대입 연산자 =을 통해 복사하면 배열을 공유하게 됨.
			배열1의 값을 바꾸면 배열 2의 값도 같이 바뀜.
			
		배열1 = 배열 2;
		
		배열을 복사하려면 각 번지에 있는 값을 복사해야함
			반복문을 활용해서 복사
			system.arraycopy()를 이용
			
			system.arraycopy(src, srcPos, dest, destPos, length);
		src : 원본, srcPos:원본에서 복사할 시작위치
		dest : 복사본, destPos : 복사본에서 복사될 시작 위치
		length : 복사할 길이
		  
	배열 정렬
		배열의 값을 정렬
		버블정렬, 삽입정렬, 병합정렬 등 다양한 정렬이 있다
			그중 하나를 이용
		Arrays.sort()를 이용하여 정렬할 수 있다.
			단, 기본 자료형 배열은 오름차순만 가능
			
		Array.sor(배열명);
		
	배열의 확장
		배열의 크기보다 많은 데이터를 저장하려면 배열을 늘려야함.
		
	다차원 배열
		1차원 배열: 한 반의 학생 성적을 관리(번호)
		2차원 배열: 한 학년의 학생 성적을 관리(반, 번호)
		3차원 배열: 학년 전체 성적을 관리(학년, 반, 번호)
		
	2차원 배열
		배열 선언 및 생성방법
		
		자료형 [] [] 배열명 = new int[행][열];
	
		
	
	
	*/
}
